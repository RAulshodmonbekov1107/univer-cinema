# Generated by Django 5.2 on 2025-04-26 04:59

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image_url', models.ImageField(upload_to='gallery/')),
                ('caption_kg', models.CharField(max_length=255)),
                ('caption_ru', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Galleries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('capacity', models.IntegerField()),
                ('layout_json', models.JSONField(help_text='JSON representation of the hall layout')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title_kg', models.CharField(max_length=255)),
                ('title_ru', models.CharField(max_length=255)),
                ('synopsis_kg', models.TextField()),
                ('synopsis_ru', models.TextField()),
                ('trailer', models.URLField()),
                ('genre', models.CharField(choices=[('action', 'Action'), ('comedy', 'Comedy'), ('drama', 'Drama'), ('horror', 'Horror'), ('sci_fi', 'Sci-Fi'), ('fantasy', 'Fantasy'), ('romance', 'Romance'), ('thriller', 'Thriller'), ('animation', 'Animation'), ('documentary', 'Documentary')], max_length=20)),
                ('language', models.CharField(choices=[('kg', 'Kyrgyz'), ('ru', 'Russian'), ('en', 'English'), ('other', 'Other')], max_length=10)),
                ('duration', models.IntegerField(help_text='Duration in minutes')),
                ('poster', models.ImageField(upload_to='movie_posters/')),
                ('release_date', models.DateField()),
                ('is_showing', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title_kg', models.CharField(max_length=255)),
                ('title_ru', models.CharField(max_length=255)),
                ('content_kg', models.TextField()),
                ('content_ru', models.TextField()),
                ('image', models.ImageField(upload_to='news_images/')),
                ('published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'News',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Snack',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name_kg', models.CharField(max_length=100)),
                ('name_ru', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('image', models.ImageField(upload_to='snack_images/')),
                ('available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=100)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_resets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Showtime',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField()),
                ('language', models.CharField(choices=[('kg', 'Kyrgyz'), ('ru', 'Russian'), ('en', 'English'), ('original', 'Original')], max_length=10)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='showtimes', to='cinema.hall')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='showtimes', to='cinema.movie')),
            ],
            options={
                'ordering': ['datetime'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('seats_json', models.JSONField(help_text='JSON array of selected seats')),
                ('snack_total', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('ticket_total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('grand_total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='booking_qrcodes/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('showtime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='cinema.showtime')),
            ],
        ),
        migrations.CreateModel(
            name='SnackOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snack_orders', to='cinema.booking')),
                ('snack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='cinema.snack')),
            ],
        ),
    ]
